import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Image from 'next/image';
import { supabase } from '@/lib/supabase';

// 서비스 데이터 타입 정의
type ServiceData = {
  id: string;
  title: string;
  category: string;
  subcategory: string;
  description: string;
  features: string[];
  price: string;
  website: string;
  rating: number;
  thumbnail_url?: string;
  image_url?: string;
  comments: any[];
  likes: number;
  dislikes: number;
};

export default function ServiceDetail() {
  const router = useRouter();
  const { slug } = router.query;
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [service, setService] = useState<ServiceData | null>(null);
  const [comment, setComment] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [user, setUser] = useState<any>(null);

  // Supabase에서 서비스 데이터 가져오기
  useEffect(() => {
    if (!slug) return;
    
    const fetchService = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // 슬러그가 UUID 형태인지 확인
        const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(String(slug));
        
        // Supabase에서 서비스 데이터 가져오기
        const { data: serviceData, error: serviceError } = await supabase
          .from('services')
          .select('*, comments(*)')
          .eq(isUuid ? 'id' : 'slug', slug)
          .single();
        
        if (serviceError) {
          console.error('서비스 데이터 로딩 오류:', serviceError);
          setError('서비스를 찾을 수 없습니다');
          return;
        }
        
        if (serviceData) {
          setService({
            id: serviceData.id,
            title: serviceData.title,
            category: serviceData.category,
            subcategory: serviceData.subcategory,
            description: serviceData.description || '',
            features: Array.isArray(serviceData.features) ? serviceData.features : [],
            price: serviceData.price || '',
            website: serviceData.website || '',
            rating: serviceData.rating || 0,
            thumbnail_url: serviceData.thumbnail_url,
            image_url: serviceData.image_url,
            comments: serviceData.comments || [],
            likes: serviceData.likes || 0,
            dislikes: serviceData.dislikes || 0
          });
        } else {
          setError('서비스를 찾을 수 없습니다');
        }
      } catch (err) {
        console.error('서비스 데이터 로딩 오류:', err);
        setError('서비스 데이터를 불러오는 중 오류가 발생했습니다');
      } finally {
        setLoading(false);
      }
    };
    
    fetchService();
  }, [slug]);

  // 사용자 인증 상태 확인
  useEffect(() => {
    const checkUser = async () => {
      try {
        // 현재 사용자 세션 확인
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          setUser(session.user);
          setIsLoggedIn(true);
          
          // 관리자 권한 확인
          const { data: profile } = await supabase
            .from('profiles')
            .select('is_admin')
            .eq('id', session.user.id)
            .single();
            
          if (profile?.is_admin) {
            setIsAdmin(true);
          }
        }
      } catch (error) {
        console.error('사용자 상태 확인 오류:', error);
      }
    };
    
    checkUser();
  }, []);

  // 댓글 제출 처리
  const handleCommentSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!comment.trim() || !service) {
      alert('댓글 내용을 입력해주세요.');
      return;
    }
    
    try {
      setLoading(true);
      
      // Supabase에 댓글 추가
      const { data, error } = await supabase
        .from('comments')
        .insert([
          {
            service_id: service.id,
            user_id: user?.id,
            content: comment,
            is_active: true
          }
        ])
        .select();
      
      if (error) {
        throw error;
      }
      
      // 댓글 추가 후 서비스 데이터 다시 불러오기
      const { data: updatedService, error: serviceError } = await supabase
        .from('services')
        .select('*, comments(*)')
        .eq('id', service.id)
        .single();
      
      if (serviceError) {
        throw serviceError;
      }
      
      setService({
        ...service,
        comments: updatedService.comments || []
      });
      
      // 입력 필드 초기화
      setComment('');
    } catch (error) {
      console.error('댓글 추가 오류:', error);
      alert('댓글을 추가하는 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // 로딩 중인 경우
  if (loading) {
    return (
      <div className="container mx-auto px-4 py-12 flex justify-center items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  // 오류가 있거나 서비스 데이터가 없는 경우
  if (error || !service) {
    return (
      <div className="container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold mb-6">{error || '서비스를 찾을 수 없습니다'}</h1>
        <Link href="/" className="text-primary hover:underline">
          메인으로 돌아가기
        </Link>
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen">
      <div className="container mx-auto px-4 py-8">
        {/* 상단 네비게이션 */}
        <div className="mb-8">
          <Link href="/" className="text-primary hover:underline inline-flex items-center">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            메인으로 돌아가기
          </Link>
        </div>
        
        {/* 서비스 상세 정보 */}
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="md:flex">
            {/* 서비스 이미지 */}
            <div className="md:w-1/3 p-4 flex items-center justify-center bg-gray-100">
              {service.image_url ? (
                <Image 
                  src={service.image_url} 
                  alt={service.title} 
                  width={400} 
                  height={300} 
                  className="rounded-lg object-cover"
                />
              ) : (
                <div className="w-full h-64 bg-gray-200 rounded-lg flex items-center justify-center">
                  <span className="text-gray-400">이미지 없음</span>
                </div>
              )}
            </div>
            
            {/* 서비스 정보 */}
            <div className="md:w-2/3 p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h1 className="text-3xl font-bold mb-2">{service.title}</h1>
                  <div className="flex items-center mb-2">
                    <span className="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">{service.category}</span>
                    <span className="bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded">{service.subcategory}</span>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="flex text-yellow-400 mr-1">
                    {Array(5).fill(0).map((_, i) => (
                      <svg key={i} className={`h-5 w-5 ${i < Math.floor(service.rating) ? 'text-yellow-400' : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>
                  <span className="text-lg font-semibold">{service.rating.toFixed(1)}</span>
                </div>
              </div>
              
              <p className="text-gray-700 mb-6">{service.description}</p>
              
              {/* 서비스 특징 */}
              <div className="mb-6">
                <h2 className="text-xl font-semibold mb-3">주요 특징</h2>
                <ul className="list-disc pl-5 space-y-1">
                  {service.features.map((feature, index) => (
                    <li key={index} className="text-gray-700">{feature}</li>
                  ))}
                </ul>
              </div>
              
              {/* 가격 및 웹사이트 */}
              <div className="flex flex-wrap justify-between items-center">
                <div className="mb-4">
                  <h2 className="text-xl font-semibold mb-1">가격</h2>
                  <p className="text-2xl font-bold text-primary">{service.price}</p>
                </div>
                
                {service.website && (
                  <a 
                    href={service.website} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    className="bg-primary text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors inline-flex items-center"
                  >
                    웹사이트 방문
                    <svg className="ml-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                  </a>
                )}
              </div>
            </div>
          </div>
          
          {/* 좋아요/싫어요 버튼 */}
          <div className="px-6 py-4 border-t border-gray-200">
            <div className="flex space-x-4">
              <button className="flex items-center bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-md transition-colors">
                <svg className="h-5 w-5 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                </svg>
                좋아요 ({service.likes})
              </button>
              
              <button className="flex items-center bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-md transition-colors">
                <svg className="h-5 w-5 mr-2 text-red-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                </svg>
                싫어요 ({service.dislikes})
              </button>
            </div>
          </div>
          
          {/* 댓글 섹션 */}
          <div className="px-6 py-6 border-t border-gray-200">
            <h2 className="text-xl font-semibold mb-4">댓글 {service.comments.length}개</h2>
            
            {isLoggedIn ? (
              <form onSubmit={handleCommentSubmit} className="mb-6">
                <textarea
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  placeholder="댓글을 작성해주세요..."
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary mb-2"
                  rows={3}
                  required
                />
                <button
                  type="submit"
                  className="bg-primary text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
                >
                  댓글 작성
                </button>
              </form>
            ) : (
              <div className="bg-gray-100 p-4 rounded-lg mb-6">
                <p className="text-gray-700">댓글을 작성하려면 <Link href="/login" className="text-primary hover:underline">로그인</Link>이 필요합니다.</p>
              </div>
            )}
            
            <div className="space-y-4">
              {service.comments.filter(c => c.is_active).map((comment, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex justify-between mb-2">
                    <span className="font-semibold">{comment.user_id || '사용자'}</span>
                  </div>
                  <p className="text-gray-700 mb-3">{comment.content}</p>
                  <div className="flex text-sm text-gray-500">
                    <div className="flex items-center mr-4">
                      <svg className="h-4 w-4 mr-1 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                      </svg>
                      <span>{comment.likes || 0}</span>
                    </div>
                    <div className="flex items-center">
                      <svg className="h-4 w-4 mr-1 text-red-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z" />
                      </svg>
                      <span>{comment.dislikes || 0}</span>
                    </div>
                  </div>
                </div>
              ))}
              
              {service.comments.filter(c => c.is_active).length === 0 && (
                <div className="text-center py-4">
                  <p className="text-gray-500">아직 댓글이 없습니다. 첫 댓글을 작성해보세요!</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
